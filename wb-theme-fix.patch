*** a/src/modules/website-builder/components/SiteEditor.tsx
--- b/src/modules/website-builder/components/SiteEditor.tsx
@@
-                  <ThemePalette theme={safeTheme} onThemeUpdate={handleThemeUpdate} />
+                  {/* Pass both theme and site; ThemePalette is defensive either way */}
+                  <ThemePalette theme={safeTheme} site={site} onThemeUpdate={handleThemeUpdate} />
                 </div>
               </TabsContent>
 
*** /dev/null
--- b/src/modules/website-builder/components/ThemePalette.tsx
@@
+import React, { useEffect, useMemo, useState } from 'react'
+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
+import { Button } from '@/components/ui/button'
+import { Input } from '@/components/ui/input'
+import { Label } from '@/components/ui/label'
+import { Site } from '../types'
+
+type ThemeShape = {
+  primaryColor?: string
+  secondaryColor?: string
+  fontFamily?: string
+  logoUrl?: string
+}
+
+interface ThemePaletteProps {
+  /** Optional current theme object */
+  theme?: ThemeShape
+  /** Optional site, if caller prefers to pass the whole site */
+  site?: Site | null
+  /** Called with partial updates whenever a field changes */
+  onThemeUpdate: (updates: Partial<ThemeShape>) => void
+}
+
+/**
+ * Defensive ThemePalette
+ * - Works if caller passes `theme`, `site.theme`, or nothing at all.
+ * - Never throws if props are missing.
+ * - Emits granular updates via `onThemeUpdate`.
+ */
+export default function ThemePalette({
+  theme,
+  site,
+  onThemeUpdate
+}: ThemePaletteProps) {
+  // Resolve an initial theme from any source with safe fallbacks.
+  const resolvedTheme = useMemo<Required<ThemeShape>>(() => {
+    const src = (theme ?? site?.theme ?? {}) as ThemeShape
+    return {
+      primaryColor: src.primaryColor || '#1d4ed8',
+      secondaryColor: src.secondaryColor || '#f59e0b',
+      fontFamily: src.fontFamily || 'Inter',
+      logoUrl: src.logoUrl || (site as any)?.logoUrl || ''
+    }
+  }, [theme, site])
+
+  const [local, setLocal] = useState(resolvedTheme)
+
+  // Keep local state in sync if upstream theme changes
+  useEffect(() => {
+    setLocal(resolvedTheme)
+  }, [resolvedTheme])
+
+  const update = (updates: Partial<ThemeShape>) => {
+    setLocal(prev => ({ ...prev, ...updates }))
+    // Emit only the changed keys outward
+    onThemeUpdate(updates)
+  }
+
+  const resetDefaults = () => {
+    const defaults: Required<ThemeShape> = {
+      primaryColor: '#1d4ed8',
+      secondaryColor: '#f59e0b',
+      fontFamily: 'Inter',
+      logoUrl: ''
+    }
+    setLocal(defaults)
+    onThemeUpdate(defaults)
+  }
+
+  return (
+    <Card>
+      <CardHeader>
+        <CardTitle className="text-sm">Theme</CardTitle>
+      </CardHeader>
+      <CardContent className="space-y-4">
+        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+          <div className="space-y-2">
+            <Label htmlFor="primaryColor">Primary Color</Label>
+            <div className="flex gap-2">
+              <Input
+                id="primaryColor"
+                type="text"
+                placeholder="#1d4ed8"
+                value={local.primaryColor}
+                onChange={(e) => update({ primaryColor: e.target.value })}
+              />
+              <Input
+                aria-label="Primary color picker"
+                type="color"
+                value={isColor(local.primaryColor) ? local.primaryColor : '#1d4ed8'}
+                onChange={(e) => update({ primaryColor: e.target.value })}
+                className="w-12 p-1"
+              />
+            </div>
+          </div>
+
+          <div className="space-y-2">
+            <Label htmlFor="secondaryColor">Secondary Color</Label>
+            <div className="flex gap-2">
+              <Input
+                id="secondaryColor"
+                type="text"
+                placeholder="#f59e0b"
+                value={local.secondaryColor}
+                onChange={(e) => update({ secondaryColor: e.target.value })}
+              />
+              <Input
+                aria-label="Secondary color picker"
+                type="color"
+                value={isColor(local.secondaryColor) ? local.secondaryColor : '#f59e0b'}
+                onChange={(e) => update({ secondaryColor: e.target.value })}
+                className="w-12 p-1"
+              />
+            </div>
+          </div>
+
+          <div className="space-y-2">
+            <Label htmlFor="fontFamily">Font Family</Label>
+            <Input
+              id="fontFamily"
+              type="text"
+              placeholder="Inter"
+              value={local.fontFamily}
+              onChange={(e) => update({ fontFamily: e.target.value })}
+            />
+            <p className="text-xs text-muted-foreground">
+              Enter any web-safe font or a loaded custom font name.
+            </p>
+          </div>
+
+          <div className="space-y-2">
+            <Label htmlFor="logoUrl">Logo URL</Label>
+            <Input
+              id="logoUrl"
+              type="text"
+              placeholder="https://your-cdn.com/logo.png"
+              value={local.logoUrl}
+              onChange={(e) => update({ logoUrl: e.target.value })}
+            />
+            {local.logoUrl ? (
+              <div className="border rounded p-2">
+                {/* eslint-disable-next-line @next/next/no-img-element */}
+                <img src={local.logoUrl} alt="Logo preview" className="h-10 object-contain" />
+              </div>
+            ) : null}
+          </div>
+        </div>
+
+        <div className="flex gap-2">
+          <Button variant="outline" onClick={resetDefaults}>Reset to defaults</Button>
+        </div>
+      </CardContent>
+    </Card>
+  )
+}
+
+function isColor(val?: string) {
+  if (!val) return false
+  // simple hex color validation
+  return /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6}|[0-9A-Fa-f]{8})$/.test(val)
+}