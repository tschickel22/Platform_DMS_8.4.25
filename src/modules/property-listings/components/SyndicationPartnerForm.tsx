import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Checkbox } from '@/components/ui/checkbox'
import { Separator } from '@/components/ui/separator'
import { PlatformSyndicationPartner, SyndicationPartnerConfiguration } from '@/types'

interface SyndicationPartnerFormProps {
  partner?: SyndicationPartnerConfiguration | null
  availablePlatformPartners: PlatformSyndicationPartner[]
  globalLeadReplyEmail: string
  onSubmit: (partner: SyndicationPartnerConfiguration) => void
  onCancel: () => void
}

export function SyndicationPartnerForm({
  partner,
  availablePlatformPartners,
  globalLeadReplyEmail,
  onSubmit,
  onCancel
}: SyndicationPartnerFormProps) {
  const [selectedPlatformPartnerId, setSelectedPlatformPartnerId] = useState<string>('')
  const [name, setName] = useState('')
  const [listingTypes, setListingTypes] = useState<string[]>([])
  const [leadEmail, setLeadEmail] = useState('')
  const [exportFormat, setExportFormat] = useState<'XML' | 'JSON'>('XML')
  const [accountId, setAccountId] = useState('')
  const [isActive, setIsActive] = useState(true)

  const isEditing = !!partner

  // Available listing type options
  const listingTypeOptions = [
    { value: 'for_rent', label: 'For Rent', description: 'Rental properties' },
    { value: 'for_sale', label: 'For Sale', description: 'Properties for sale' },
    { value: 'manufactured_home', label: 'Manufactured Home', description: 'Mobile/manufactured homes' },
    { value: 'rv', label: 'RV', description: 'RV/recreational vehicles' },
    { value: 'apartment', label: 'Apartment', description: 'Apartment units' },
    { value: 'house', label: 'House', description: 'Single-family houses' },
    { value: 'condo', label: 'Condo', description: 'Condominium units' }
  ]

  // Initialize form with existing partner data
  useEffect(() => {
    if (partner) {
      setSelectedPlatformPartnerId(partner.platformPartnerId || '')
      setName(partner.name)
      setListingTypes(partner.listingTypes)
      setLeadEmail(partner.leadEmail)
      setExportFormat(partner.exportFormat)
      setAccountId(partner.accountId || '')
      setIsActive(partner.isActive)
    } else {
      // Reset form for new partner
      setSelectedPlatformPartnerId('')
      setName('')
      setListingTypes([])
      setLeadEmail(globalLeadReplyEmail)
      setExportFormat('XML')
      setAccountId('')
      setIsActive(true)
    }
  }, [partner, globalLeadReplyEmail])

  // Handle platform partner selection
  const handlePlatformPartnerChange = (platformPartnerId: string) => {
    setSelectedPlatformPartnerId(platformPartnerId)
    
    const platformPartner = availablePlatformPartners.find(p => p.platformId === platformPartnerId)
    if (platformPartner) {
      setName(platformPartner.name)
      setListingTypes(platformPartner.supportedListingTypes)
      setLeadEmail(platformPartner.baseLeadEmail)
      setExportFormat(platformPartner.defaultExportFormat)
    }
  }

  // Handle listing type checkbox changes
  const handleListingTypeChange = (type: string, checked: boolean) => {
    if (checked) {
      setListingTypes(prev => [...prev, type])
    } else {
      setListingTypes(prev => prev.filter(t => t !== type))
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!name.trim()) {
      return
    }

    if (listingTypes.length === 0) {
      return
    }

    const partnerData: SyndicationPartnerConfiguration = {
      id: partner?.id || `partner_${Date.now()}`,
      platformPartnerId: selectedPlatformPartnerId || undefined,
      name: name.trim(),
      listingTypes,
      leadEmail: leadEmail.trim(),
      exportFormat,
      exportUrl: '', // Will be generated by parent component
      accountId: accountId.trim() || undefined,
      isActive,
      createdAt: partner?.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }

    onSubmit(partnerData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Platform Partner Selection (only for new partners) */}
      {!isEditing && (
        <div className="space-y-2">
          <Label htmlFor="platform-partner">Platform Partner *</Label>
          <Select value={selectedPlatformPartnerId} onValueChange={handlePlatformPartnerChange}>
            <SelectTrigger>
              <SelectValue placeholder="Select a platform partner" />
            </SelectTrigger>
            <SelectContent>
              {availablePlatformPartners
                .filter(p => p.isActive)
                .map((platformPartner) => (
                  <SelectItem key={platformPartner.platformId} value={platformPartner.platformId}>
                    <div className="flex flex-col">
                      <span className="font-medium">{platformPartner.name}</span>
                      <span className="text-xs text-muted-foreground">
                        {platformPartner.description}
                      </span>
                    </div>
                  </SelectItem>
                ))}
            </SelectContent>
          </Select>
          <p className="text-sm text-muted-foreground">
            Choose from pre-configured platform partners
          </p>
        </div>
      )}

      {/* Partner Name */}
      <div className="space-y-2">
        <Label htmlFor="name">Partner Name *</Label>
        <Input
          id="name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="e.g., Zillow, MH Village, Apartments.com"
          disabled={!isEditing && !!selectedPlatformPartnerId}
          required
        />
      </div>

      {/* Account ID */}
      <div className="space-y-2">
        <Label htmlFor="account-id">Account ID</Label>
        <Input
          id="account-id"
          value={accountId}
          onChange={(e) => setAccountId(e.target.value)}
          placeholder="Optional partner account identifier"
        />
        <p className="text-sm text-muted-foreground">
          Partner-specific account ID for premium features (optional)
        </p>
      </div>

      {/* Listing Types */}
      <div className="space-y-3">
        <Label>Listing Types *</Label>
        <div className="grid grid-cols-2 gap-3">
          {listingTypeOptions.map((option) => (
            <div key={option.value} className="flex items-center space-x-2">
              <Checkbox
                id={option.value}
                checked={listingTypes.includes(option.value)}
                onCheckedChange={(checked) => 
                  handleListingTypeChange(option.value, checked as boolean)
                }
              />
              <div className="grid gap-1.5 leading-none">
                <Label
                  htmlFor={option.value}
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  {option.label}
                </Label>
                <p className="text-xs text-muted-foreground">
                  {option.description}
                </p>
              </div>
            </div>
          ))}
        </div>
        <p className="text-sm text-muted-foreground">
          Select which types of listings to include in the syndication feed
        </p>
      </div>

      <Separator />

      {/* Lead Email */}
      <div className="space-y-2">
        <Label htmlFor="lead-email">Lead Email *</Label>
        <Input
          id="lead-email"
          type="email"
          value={leadEmail}
          onChange={(e) => setLeadEmail(e.target.value)}
          placeholder="support+partner@notifications.renterinsight.com"
          required
        />
        <p className="text-sm text-muted-foreground">
          This email will be included in the XML/JSON feed for lead notifications
        </p>
      </div>

      {/* Export Format */}
      <div className="space-y-2">
        <Label htmlFor="export-format">Export Format</Label>
        <Select value={exportFormat} onValueChange={(value: 'XML' | 'JSON') => setExportFormat(value)}>
          <SelectTrigger>
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="XML">
              <div className="flex flex-col">
                <span>XML</span>
                <span className="text-xs text-muted-foreground">Zillow Format</span>
              </div>
            </SelectItem>
            <SelectItem value="JSON">
              <div className="flex flex-col">
                <span>JSON</span>
                <span className="text-xs text-muted-foreground">MH Village Format</span>
              </div>
            </SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Form Actions */}
      <div className="flex justify-end space-x-2 pt-4">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit">
          {isEditing ? 'Update Partner' : 'Create Partner'}
        </Button>
      </div>
    </form>
  )
}